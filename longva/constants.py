import os
import hashlib

#############
# LongVA Demo Utils
#############

title_markdown = """
# [LongVA Multimodal Chat](https://lmm-lab.github.io/LongVA/)
"""

subtitle_markdown = """
This is a research preview of LongVA, a multimodal chat system that leverages Large Language Models (LLMs) and multimodal models to enable more interactive and multimodal conversations.
"""

block_css = """
#buttons button {
    min-width: min(120px,100%);
}
"""

tos_markdown = """
## Terms of use
By using this service, users are required to agree to the following terms:
The service is a research preview intended for non-commercial use only. It only provides limited safety measures and may generate offensive content. It must not be used for any illegal, harmful, violent, racist, or sexual purposes. The service may collect user dialogue data for future research.
Please click the "Flag" button if you get any inappropriate answer! We will collect those to keep improving our moderator.
For an optimal experience, please use desktop computers for this demo, as mobile devices may compromise its quality.
"""


learn_more_markdown = """
## License
The service is a research preview intended for non-commercial use only, subject to the model [License](https://github.com/facebookresearch/llama/blob/main/MODEL_CARD.md) of LLaMA, [Terms of Use](https://openai.com/policies/terms-of-use) of the data generated by OpenAI, and [Privacy Practices](https://chrome.google.com/webstore/detail/sharegpt-share-your-chatg/daiacboceoaocpibfodeljbdfacokfjb) of ShareGPT. Please contact us if you find any potential violation.
"""

bibtext = """
## Citation
```
```
"""

################## BACKEND ##################
os.environ["GRADIO_EXAMPLES_CACHE"] = (
    "/home/boli/demos/cache"
)
os.environ["GRADIO_TEMP_DIR"] = (
    "/home/boli/demos/cache"
)
multimodal_folder_path = (
    "/home/boli/demos/cache/user_logs/medias"
)

if not os.path.exists(multimodal_folder_path):
    os.makedirs(multimodal_folder_path)


def generate_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()[:6]
